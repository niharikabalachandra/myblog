[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Niharika Balachandra",
    "section": "",
    "text": "Welcome to Niharika’s personal blog—an intersection of data, technology, and creativity. Niharika is a seasoned Data Science Manager with a seven-year track record in leading teams focused on Machine Learning, Natural Language Processing, and Deep Learning.\nNiharika is proficient in guiding teams specializing in Generative AI, Consumer Behavior Analytics, Predictive Modeling, Deep Learning, and more, particularly within the domains of eCommerce and Ad Tech. Her passion lies in translating quantifiable data into actionable insights that positively shape businesses. Niharika brings a unique blend of market awareness and technical prowess, ensuring the delivery of user-centric products and solutions.\nWhen not innovating on data platforms, Niharika unwinds by molding clay on a potter’s wheel and immersing herself in the strokes of paint on canvas.\nExplore Niharika’s blog to embark on a journey where data points weave stories, and algorithmic solutions propel us toward a clearer, more informed future."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Niharika Balachandra",
    "section": "Education",
    "text": "Education\nUniversity of Illinois at Chicago | Chicago, IL\nMaster of Science in Electrical and Computer Engineering, Aug 2015 - May 2017\nM. S. Ramaiah Institute of technology | Bangalore, India\nBachelor’s in Electronics and Communication Engineering (B.E), Sept 2007 - June 2011"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "Niharika Balachandra",
    "section": "Experience",
    "text": "Experience\nSkai.io (formerly Kenshoo Inc.) | Data Science Manager | Mar 2019 - present\nPublicis Sapient | Associate Data Scientist | Aug 2017 - Mar 2019"
  },
  {
    "objectID": "posts/image_recognition/index.html#model-tuning",
    "href": "posts/image_recognition/index.html#model-tuning",
    "title": "Image Recognition Engine with GenAI Explanation",
    "section": "Model Tuning",
    "text": "Model Tuning\nThe idea is to use transfer learning to fine tune a pre-trained vision model. I use the Resnet50 pre-trained model for this project but there are a host of other pre-trained vision models you can find via pytorch-image-models or timm. The easiest way to fine tune the Resnet50 pre-trained model is using the fastai library. Here is the notebook I used to generate a pickled version of the fine-tuned model."
  },
  {
    "objectID": "posts/image_recognition/index.html#deploying-on-hugging-face",
    "href": "posts/image_recognition/index.html#deploying-on-hugging-face",
    "title": "Image Recognition Engine with GenAI Explanation",
    "section": "Deploying on Hugging Face",
    "text": "Deploying on Hugging Face\nWe now needed to host this serialized model on Hugging Face and interact with it via the huggingface_hub python library. Uploading a model to Hugging Face is really simple via the UI and this doc walks though the process in detail. The following code can then be used to load this hosted model into memory so we can build the app around it.\n\n\nCode\nfrom huggingface_hub import hf_hub_download\n\nREPO_ID = \"username/huggingface_repo\"\nFILENAME = \"export.pkl\"\n\nmodel_file_name = hf_hub_download(repo_id=REPO_ID, filename=FILENAME)"
  },
  {
    "objectID": "posts/image_recognition/index.html#architecture",
    "href": "posts/image_recognition/index.html#architecture",
    "title": "Image Recognition Engine with GenAI Explanation",
    "section": "Architecture",
    "text": "Architecture\n\n\n\n\n\n---\ntitle: Model Fine-tuning\n---\nflowchart LR\n  A(Resnet50 Pre-trained Model) --&gt; B(Fine-tuned for Identification of Flowers)\n  B --&gt; C(Serialized Model)\n\n\n\n\n\n\n\n\n\n\n\n---\ntitle: Deploying Model on Hugging Face \n---\nflowchart LR\n C(Serialized Fine-tuned Model) --&gt; D(Host Serialized Model on Hugging Face)\nD --&gt; E(Load Model as needed)\n\n\n\n\n\n\n\n\nCode\nfrom fastai.vision.all import *\nfrom huggingface_hub import hf_hub_download\n\nREPO_ID = \"&lt;hugging_face_repo_hosting_fine-tuned_model&gt;\"\nFILENAME = \"export.pkl\"\n\nmodel_file_name = hf_hub_download(repo_id=REPO_ID, filename=FILENAME)\nlearn_inf = load_learner(model_file_name)\nlabels = learn_inf.dls.vocab\n\ndef predict(img):\n    img = PILImage.create(img)\n    pred,pred_idx,probs = learn_inf.predict(img)\n    dict_ = {labels[i]: float(probs[i]) for i in range(len(labels))}\n    dict_ = dict(sorted(dict_.items(), key=lambda x: x[1], reverse=True))\n    best_class = list(dict_.keys())[0]\n    return dict_ , best_class\n\nimage = PILImage.create(file_name)\ncol1.image(image, use_column_width=True)\npredictions, best_class = predict(image)"
  },
  {
    "objectID": "posts/image_recognition/index.html#deploying-quantized-llm-on-hugging-face",
    "href": "posts/image_recognition/index.html#deploying-quantized-llm-on-hugging-face",
    "title": "Image Recognition Engine with GenAI Explanation",
    "section": "Deploying Quantized LLM on Hugging Face",
    "text": "Deploying Quantized LLM on Hugging Face\nThe idea here is to host a dockerized version of a quantized open source LLM using the CPU tier on Hugging Face Spaces and exposing the LLM via an API endpoint for us to then be able to interact with for free. I chose to use Zephyr 7B Alpha which is a fine-tuned version of Mistral AI’s Mistral-7B-v0.1.\nMy implementation of this step is inspired by this blog post that goes over the exact process of getting to an API endpoint."
  },
  {
    "objectID": "posts/image_recognition/index.html#architecture-1",
    "href": "posts/image_recognition/index.html#architecture-1",
    "title": "Image Recognition Engine with GenAI Explanation",
    "section": "Architecture",
    "text": "Architecture\n\n\n\n\n\n---\ntitle: Deploying Quantized LLM on Hugging Face\n---\nflowchart LR\nC(FastAPI Function for LLM completion) --&gt; D(Containerize our Application)\nD --&gt; E(Deploy via Hugging Face Spaces)\nE --&gt; F(Fast API Endpoint)\n\n\n\n\n\n\n\n\nCode\nimport requests\nimport os\n\n# hugging_face_token_with_read_access is stored as a hugging face secret\nHF_TOKEN = os.environ.get('&lt;hugging_face_token_with_read_access&gt;')\nbest_class = '&lt;identified_image_label&gt;'\nAPI_URL = \"&lt;API_endpoint_of_hugging-face_hosted_LLM-model&gt;\"\n\nrequest_auth = f'Bearer {HF_TOKEN}' \nheaders = {\n    'accept': 'application/json',\n    'Content-Type': 'application/json',\n    'Authorization': request_auth\n}\njson_data = {\n    'prompt': f'what is a {best_class} in 2 sentences?'\n}\n\nresponse = requests.post(\n    API_URL,\n    headers=headers,\n    json=json_data,\n)\n\ntry:\n    respose_txt = response.json()\nexcept Exception as e:\n    print(f'Error details: {e}')"
  },
  {
    "objectID": "posts/image_recognition/index.html#deploying-streamlit-application-on-hugging-face-spaces",
    "href": "posts/image_recognition/index.html#deploying-streamlit-application-on-hugging-face-spaces",
    "title": "Image Recognition Engine with GenAI Explanation",
    "section": "Deploying Streamlit Application on Hugging Face Spaces",
    "text": "Deploying Streamlit Application on Hugging Face Spaces\nI start with creating a new Streamlit Hugging Face Space. I then build the streamlit app that integrates all the 3 components: load in the image recognition model, build out the interface to upload images and display results and finally to pass the prediction via a prompt to generate a high-level explanation of the flower species identified. You can refer to the app.py file for more information on how everything was stitched together in an application."
  },
  {
    "objectID": "posts/image_recognition/index.html#architecture-2",
    "href": "posts/image_recognition/index.html#architecture-2",
    "title": "Image Recognition Engine with GenAI Explanation",
    "section": "Architecture",
    "text": "Architecture\n\n\n\n\n\n---\ntitle: Streamlit Application on Hugging Space Spaces\n---\nflowchart LR\n\nD(Build App User Interface)\nD --&gt; B(Upload Flower Image)\nD --&gt; C(Load Image Recognition Model)\nB --&gt; C\nC --&gt; E{Identify Flower Species}\nE --&gt; N(Output Identified Flower Species)\n\nE --&gt; F(Pass Identified Label to LLM)\nF --&gt; G(Generate LLM Response)\nG --&gt; O(Ouput Response on Identified Flower Species)\nO --&gt; D"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Welcome to my blog! I’m Niharika, a passionate data scientist weaving together data, tech, and creativity. Over seven years, I’ve led teams in ML, NLP, and beyond, transforming data into actionable insights for user-centric solutions in E-commerce and Ad Tech.\nBut, let’s make this journey about us. Follow along as I navigate the ever-changing and sometimes overwhelming world of AI through applied projects. This space is meant to be shared—a place to connect and learn together.\nExpect bi-monthly posts on every 2nd and 4th Saturday. Without further ado, join me on a journey where data tells stories, and together, we explore the algorithms actively shaping our future. Let’s connect and delve into this exciting space!\nIf this labor of love enriches your life, please consider supporting it with a donation. Your contributions have a real impact, enabling me to curate content that demystifies the rapidly changing world of AI, fostering innovation and creating a community. This is a passion project I pursue during my free time, and I aim to keep it free, ad-free, and alive thanks to reader patronage. If you already donate, I appreciate you more than you know."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Niharika’s Blog",
    "section": "",
    "text": "Image Recognition Engine with GenAI Explanation\n\n\n\ncode\n\n\nanalysis\n\n\ndeploy\n\n\n\n\n\n\n\nNiharika Balachandra\n\n\nFeb 3, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\nnews\n\n\n\n\n\n\n\nNiharika Balachandra\n\n\nJan 28, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  }
]